// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MineRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MineRequest) Reset()         { *m = MineRequest{} }
func (m *MineRequest) String() string { return proto.CompactTextString(m) }
func (*MineRequest) ProtoMessage()    {}
func (*MineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *MineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MineRequest.Unmarshal(m, b)
}
func (m *MineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MineRequest.Marshal(b, m, deterministic)
}
func (m *MineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineRequest.Merge(m, src)
}
func (m *MineRequest) XXX_Size() int {
	return xxx_messageInfo_MineRequest.Size(m)
}
func (m *MineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MineRequest proto.InternalMessageInfo

func (m *MineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MineReply struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cat                  string   `protobuf:"bytes,2,opt,name=cat,proto3" json:"cat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MineReply) Reset()         { *m = MineReply{} }
func (m *MineReply) String() string { return proto.CompactTextString(m) }
func (*MineReply) ProtoMessage()    {}
func (*MineReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *MineReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MineReply.Unmarshal(m, b)
}
func (m *MineReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MineReply.Marshal(b, m, deterministic)
}
func (m *MineReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineReply.Merge(m, src)
}
func (m *MineReply) XXX_Size() int {
	return xxx_messageInfo_MineReply.Size(m)
}
func (m *MineReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MineReply.DiscardUnknown(m)
}

var xxx_messageInfo_MineReply proto.InternalMessageInfo

func (m *MineReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MineReply) GetCat() string {
	if m != nil {
		return m.Cat
	}
	return ""
}

func init() {
	proto.RegisterType((*MineRequest)(nil), "api.MineRequest")
	proto.RegisterType((*MineReply)(nil), "api.MineReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x92, 0xe5, 0xe2, 0xf6, 0xcd,
	0xcc, 0x4b, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x51, 0xd2, 0xe5, 0xe2, 0x84, 0x48, 0x17,
	0xe4, 0x54, 0xa2, 0x4b, 0x0a, 0x09, 0x70, 0x31, 0x27, 0x27, 0x96, 0x48, 0x30, 0x81, 0x05, 0x40,
	0x4c, 0x23, 0x33, 0x2e, 0x56, 0x90, 0xf2, 0x22, 0x21, 0x5d, 0x2e, 0x76, 0x10, 0xc3, 0x39, 0xb1,
	0x44, 0x48, 0x40, 0x0f, 0x64, 0x25, 0x92, 0x25, 0x52, 0x7c, 0x48, 0x22, 0x05, 0x39, 0x95, 0x4a,
	0x0c, 0x49, 0x6c, 0x60, 0x17, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x73, 0xd1, 0x8e, 0x5a,
	0x9e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MinerClient is the client API for Miner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinerClient interface {
	MineCat(ctx context.Context, in *MineRequest, opts ...grpc.CallOption) (*MineReply, error)
}

type minerClient struct {
	cc *grpc.ClientConn
}

func NewMinerClient(cc *grpc.ClientConn) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) MineCat(ctx context.Context, in *MineRequest, opts ...grpc.CallOption) (*MineReply, error) {
	out := new(MineReply)
	err := c.cc.Invoke(ctx, "/api.Miner/MineCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinerServer is the server API for Miner service.
type MinerServer interface {
	MineCat(context.Context, *MineRequest) (*MineReply, error)
}

// UnimplementedMinerServer can be embedded to have forward compatible implementations.
type UnimplementedMinerServer struct {
}

func (*UnimplementedMinerServer) MineCat(ctx context.Context, req *MineRequest) (*MineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineCat not implemented")
}

func RegisterMinerServer(s *grpc.Server, srv MinerServer) {
	s.RegisterService(&_Miner_serviceDesc, srv)
}

func _Miner_MineCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).MineCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Miner/MineCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).MineCat(ctx, req.(*MineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Miner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MineCat",
			Handler:    _Miner_MineCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
